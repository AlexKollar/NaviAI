#!/bin/python3
import subprocess, os, importlib_metadata, importlib 
from typing import List
from navi_shell import tr, get_ai_name, llm_chat, get_user
from navi import get_ip_address, get_hostname, get_parameters, get_command_path


command = "Chip List"
use = "Displays the currently installed custom scripts"
aliases = ['scripts', 'installed', 'chips']


def run(arguments=None):
        directory_path = '/opt/Navi/commands'

        # Filter for Python files and exclude __init__.py
        files = [f for f in os.listdir(directory_path) if f.endswith(
            '.py') and f != '__init__.py']

        commands_and_uses = []

        for file in files:
            command = file.replace('.py', '')

            # Load the module
            spec = importlib.util.spec_from_file_location(
                command, os.path.join(directory_path, file))
            module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(module)

            # Grab the 'use' variable from the module
            # Default to 'Description not found' if 'use' is not in the script
            use_desc = getattr(module, 'use', 'Description not found')
            commands_and_uses.append((command, use_desc))

        # For alignment purposes
        max_command_length = max([len(cmd) for cmd, _ in commands_and_uses])
        max_use_length = max([len(use) for _, use in commands_and_uses])

        print("\nCurrently installed Navi custom scripts:\n")
        print(f"{'Command':<{max_command_length}} \t Description")
        print('-' * max_command_length + '\t' + '-' *
              max_use_length)  # Drawing separators

        for command, use_desc in commands_and_uses:
            print(f"{command:<{max_command_length}} \t {use_desc}")

        return True 
